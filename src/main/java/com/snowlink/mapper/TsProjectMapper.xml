<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.snowlink.dao.TsProjectMapper">
  <resultMap id="BaseResultMap" type="com.snowlink.bean.TsProject">
    <id column="project_id" jdbcType="INTEGER" property="projectId" />
    <result column="project_name" jdbcType="VARCHAR" property="projectName" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="creator" jdbcType="VARCHAR" property="creator" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="updator" jdbcType="VARCHAR" property="updator" />
  </resultMap>
  
  	<select id="queryAll" parameterType="com.snowlink.bean.TsProject" resultType="com.snowlink.bean.TsProject">
  		SELECT
			project_id AS projectId,
			project_name AS projectName,
			creator AS creator,
			create_time AS createTime
		FROM
			ts_project
	 	where 
		    project_name like '%${projectName}%'
		    and  creator like '%${creator}%'
		    and updator like '%${updator}%'
		    limit #{pageNumber},#{pageSize}
  	</select>
  
  	<select id="queryCount" resultType="int">
  		select count(project_id)
  		from ts_project
  		where 
  		    project_name like '%${projectName}%'
		    and  creator like '%${creator}%'
		    and updator like '%${updator}%'
  	</select>
  
  	<insert id="InsertProject" parameterType="com.snowlink.bean.TsProject" useGeneratedKeys="true" keyProperty="projectId">
  		insert into ts_project(project_name,create_time,creator,update_time,updator)
  		values(#{projectName},#{createTime},#{creator},#{updateTime},#{updator})
  	</insert>
  
  	<delete id="delProject" parameterType="string">
  		DELETE 
	    FROM ts_project 
	    WHERE project_id = #{projectId}
  	</delete>
  
  	<select id="getProjectName" parameterType="string" resultType="string">
  		select project_name
  		from ts_project
  		where project_id = #{projectId}
  	</select>
  
  	<update id="ChangeProject" parameterType="com.snowlink.bean.TsProject">
  		update ts_project
  		set project_name=#{projectName},update_time=#{updateTime},updator=#{updator}
  		where project_id = #{projectId}
  	</update>
  
  
  	<select id="SelectSubordinateDoc" parameterType="com.snowlink.bean.TsProjectDocType" resultType="com.snowlink.bean.TsProjectDocType">
 	 	SELECT
 	 		doc_type_id AS docTypeId,
 	 		doc_type_name AS docTypeName,
			orderCode AS ordercode,
			creator AS creator
		FROM
			ts_project_doctype
	 	where 
		    project_id=#{projectId}  	
		    limit #{pageNumber},#{pageSize}
  	</select>
  
  	<select id="selectSubordinateDocCount" parameterType="int" resultType="int">
  		select count(project_id)
		from ts_project_doctype
		where project_id=#{projectId}  		
  	</select>
  
  	<select id="queryProjectAllCountDoc" parameterType="int" resultType="int">
	  	select count(doc_id)
		from ts_project_doc
		where   doc_type_id in (
			select doc_type_id
			from ts_project_doctype
			where project_id=#{projectId}
		)
  	
  	</select>

</mapper>